# shellcheck shell=bash
# vim: ft=sh
# fantastic bash functions

# get a common execution environment
[[ ! $MJS_COMMON_ENV ]] && . "$MJS_BASE/common.sh"

# create new or attach to existing abduco session based on cwd
abda() {
  local name
  name=$(basename "$PWD")
  abduco -A "$name" "$@"
}

# find and remove .DS_Store files (only on primary drive)
dsnuke() {
  echo -e "${RED}dsnuke$RESET finds and removes ${YELLOW}.DS_Store$RESET files (password required)"
  sudo find -x / -type f -name .DS_Store -delete
  echo -e "$DONE_MSG"
}

# install node_modules with bias towards yarn
inm() {
  # install using npm lock
  if [[ -r package-lock.json ]]; then
    npm ci
  # install using yarn lock
  elif [[ -r yarn.lock ]]; then
    yarn install --frozen-lockfile
  # just use yarn
  else
    yarn
  fi
}

# create and navigate to a new directory
mkcd() {
  mkdir -p "$1" && cd "$1" || return 1
}

# change nvim's pwd relative to current shell's pwd
ndir() {
  local path=${1:-.}
  if [[ $path != "-" ]]; then
    nvr -c "cd $(realpath "$path")"
  else
    nvr -c "cd -"
  fi
}

# find and remove node_modules directories that are grandchildren of the given path
rmnm() {
  find "$(realpath "$1")" -type d -name node_modules ! -path "*/node_modules/*" -print0 | xargs -0 rm -rf
}

# create new tmux session or attach to existing based on cwd
tat() {
  local name
  name=$(basename "$PWD")
  tmux attach -t "$name" 2> /dev/null || tmux new -s "$name"
}
